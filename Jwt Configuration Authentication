#In appsettings.json 


"JWT": {
    "Key": "This is my supper secret key for jwt",
    "Issuer": "JWTAuthenticationServer", // "https://localhost:44374/",
    "Audience": "codepedia.info",
    "Subject": "JWTServiceAccessToken"
  }
  
  
  
  # In the start up 
  
   services.AddAuthentication(x =>
            {
             ///define type of authentication 
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(o =>
            {
                // setting of jwt bearer token
                var Key = Encoding.UTF8.GetBytes(Configuration["JWT:Key"]);
                o.SaveToken = true;
                o.RequireHttpsMetadata = false;
                //Token is the key between client and server
                o.TokenValidationParameters = new TokenValidationParameters()
                {
                  ///توکن سمت سرور اعتبار سنجی بشود ؟
                    ValidateIssuer = true,
                    //اعتبار سنجی سمت کلاینت انجام بشود یا خیر ؟
                    ValidateAudience = true,
                    // تاریخ انقضای توکن 
                    ValidateLifetime = true,
                    // کلید توکن اعتبارسنجی بشود آیا؟
                    ValidateIssuerSigningKey = true,
                    // سرور ولید کدام است؟
                    ValidIssuer = Configuration["JWT:Issuer"],
                    ValidAudience = Configuration["JWT:Audience"],
                    // کلید رمز نگاری کدام است؟
                    IssuerSigningKey = new SymmetricSecurityKey(Key)
                };
            });
            
            // تو میدلویر باید تعریف بشود  
            // میخواهم از احراز هویت که بالا نوعش را از نوع جی دابلیو تی تعریف کردم استفاده کنم 
             app.UseAuthentication();
             
             
       #add token Controller 
        public IConfiguration _configuration;
        private readonly IUserService  _userService;

        public TokenController(IConfiguration config, IUserService context)
        {
            _configuration = config;
            _userService = context;
        }

        [HttpPost]
        public async Task<IActionResult> Post(UserInfo _userData)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest("User and password is not valid");
            }

            if (_userData != null && _userData.Email != null && _userData.Password != null)
            {
                var user = await _userService.GetUser(_userData.Email, _userData.Password);

                if (user != null)
                {
                    //create claims details based on the user information
                    var claim = new[] 
                    //List<Claim>
                    
                    {
                        new Claim(JwtRegisteredClaimNames.Sub, _configuration["Jwt:Subject"]),
                        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                        new Claim(JwtRegisteredClaimNames.Iat, DateTime.UtcNow.ToString()),
                        new Claim("UserId", user.UserId.ToString()),
                        new Claim("DisplayName", user.DisplayName),
                        new Claim(ClaimTypes.Name, user.UserName), ///"UserName"
                        new Claim("Email", user.Email) ,
                        new Claim(ClaimTypes.Role,"Admin")
                    };

                    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
                    var signInCredential = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
                    var token = new JwtSecurityToken(
                        issuer: _configuration["Jwt:Issuer"],
                        audience: _configuration["Jwt:Audience"],
                        claims : claim,
                        expires: DateTime.UtcNow.AddMinutes(10),
                        signingCredentials: signInCredential);

                    var tokenString= new JwtSecurityTokenHandler().WriteToken(token);
                    return Ok(new { token=tokenString});
                }
                else
                {
                    return BadRequest("Invalid credentials");
                }
            }
            else
            {
                return Unauthorized();
            }
        }
----
## add user service
 public async Task<UserInfo> GetUser(string email, string password)
        {
            return await _context.UserInfos.FirstOrDefaultAsync(u => u.Email == email && u.Password == password);
        }
             
             
